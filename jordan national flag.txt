
#include<iostream>
#include<GL/glut.h>
#include<math.h>
//# define M_PI 3.142
using namespace std;
void myinit(void)
{
 glClearColor(0.0,0.0,0.0,1.0);
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);
 }

 void circle1(GLfloat x, GLfloat y, GLfloat radius)
  {
    float angle;
    glBegin(GL_POLYGON);
    for(int i=0;i<100;i++)
	{
        angle = i*2*(M_PI/100);
        glVertex2f(x+(cos(angle)*radius),y+(sin(angle)*radius));
    }
    glEnd();
  }

 void flag(void)
 {
        glClear(GL_COLOR_BUFFER_BIT);

        glBegin(GL_QUADS);//blue st. rectangle of flag
        glColor3f(0.0,0.0,1.0);
		glVertex3f (0.1, 0.1, 0.0);
        glVertex3f (0.1, 0.96, 0.0);
        glVertex3f (0.12, 0.96, 0.0);
        glVertex3f (0.12, 0.1, 0.0);

    glEnd();

        glBegin(GL_TRIANGLES);//two red triangle of flag
        glColor3f(1.0,0.0,0.0);

		glVertex3f (0.12, 0.9, 0.0);
        glVertex3f (0.3, 0.5, 0.0);
        glVertex3f (0.12, 0.5, 0.0);

        glColor3f(1.0,0.0,0.0);
        glVertex3f (0.12, 0.6, 0.0);
        glVertex3f (0.35, 0.2, 0.0);
        glVertex3f (0.12, 0.2, 0.0);
    glEnd();

        glBegin(GL_QUADS);//four quadrilateral for blue border of flag
        glColor3f(0.0,0.0,1.0);

		glVertex3f (0.12, 0.9, 0.0);
        glVertex3f (0.3, 0.5, 0.0);
        glVertex3f (0.33, 0.5, 0.0);
        glVertex3f (0.12, 0.96, 0.0);

       glVertex3f (0.33, 0.5, 0.0);
       glVertex3f (0.18, 0.5, 0.0);
       glVertex3f (0.20, 0.46, 0.0);
       glVertex3f (0.33, 0.46, 0.0);

       glVertex3f (0.19, 0.48, 0.0);
       glVertex3f (0.35, 0.18, 0.0);
       glVertex3f (0.3688, 0.2, 0.0);
       glVertex3f (0.215, 0.49, 0.0);

       glVertex3f (0.12, 0.2, 0.0);
       glVertex3f (0.3680, 0.2, 0.0);
       glVertex3f (0.3680, 0.16, 0.0);
       glVertex3f (0.12, 0.16, 0.0);

       glVertex3f (0.14, 0.1, 0.0);
       glVertex3f (0.08, 0.1, 0.0);
       glVertex3f (0.08, 0.07, 0.0);
       glVertex3f (0.14, 0.07, 0.0);

       glVertex3f (0.18, 0.07, 0.0);
       glVertex3f (0.04, 0.07, 0.0);
       glVertex3f (0.04, 0.03, 0.0);
       glVertex3f (0.18, 0.03, 0.0);
    glEnd();
//moon
    glColor3f(1.0,1.0,1.0);
    circle1(0.180,0.610,0.036);
    glColor3f(1.0,0.0,0.0);
    circle1(0.180,0.630,0.036);
    glColor3f(1.0,1.0,1.0);
    circle1(0.180,0.61,0.019);

//sun
 glColor3f(1.0,1.0,1.0);
glBegin (GL_POLYGON);
glVertex3f(0.20-0.02,0.60-0.28,0.0);
glVertex3f(0.22-0.02,0.63-0.28,0.0);
glVertex3f(0.24-0.02,0.6-0.28,0.0);
glVertex3f(0.26-0.02,0.61-0.28,0.0);
glVertex3f(0.25-0.02,0.58-0.28,0.0);
glVertex3f(0.27-0.02,0.56-0.28,0.0);
glVertex3f(0.24-0.02,0.56-0.28,0.0);
glVertex3f(0.22-0.02,0.53-0.28,0.0);
glVertex3f(0.2-0.02,0.56-0.28,0.0);
glVertex3f(0.16-0.02,0.555-0.28,0.0);
glVertex3f(0.18-0.02,0.58-0.28,0.0);
glVertex3f(0.16-0.02,0.605-0.28,0.0);
glEnd();


    //glBegin(GL_TRIANGLE_STRIP);
    glBegin(GL_POLYGON);//writing N using circles
    glColor3f(0.0,0.0,1.0);
    int num=40;
    float r=0.05f;
    float twopi=2.0*3.1452423;
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.75);
    }

    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.65);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.55);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.45);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.35);
    }
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.25);
    }
    glEnd();
     glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.55,r*sinf(i*twopi/num)+0.15);
    }
    glEnd();
//second st. line of N
     glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.75);
    }
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.65);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.55);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.45);
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.35);
    }
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.25);
    }
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(r*cosf(i*twopi/num)+0.85,r*sinf(i*twopi/num)+0.15);
    }
    glEnd();

// inclined line of N
     glBegin(GL_POLYGON);
    glColor3f(1.0,1.0,0.0);
    glVertex2f(0.58,0.77);
    for(int i=0;i<=40;i++)
    {
        glVertex2f(0.6*r*cosf(i*twopi/num)+0.80,0.6*r*sinf(i*twopi/num)+0.12);
    }
    glEnd();



  // writing texts
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();
    glColor3f(0.0f, 1.0f, 0.0f);//needs to be called before RasterPos
    glRasterPos2f(0.66, 0.05);
    std::string s = "NEPAL";
    void * font = GLUT_BITMAP_TIMES_ROMAN_24;
    for (std::string::iterator i = s.begin(); i != s.end(); ++i)
    {
        char c = *i;
        //this does nothing, color is fixed for Bitmaps when calling glRasterPos
        //glColor3f(1.0, 0.0, 1.0);
    glutBitmapCharacter(font, c);

    }
glPopMatrix();
glutSwapBuffers();

glFlush();
}



int main(int argc,char** argv)
{
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
glutInitWindowPosition(100,100);
glutInitWindowSize(960,650);
glutCreateWindow("Polygon with viewport");
myinit();
glutDisplayFunc(flag);
glutMainLoop();
}
NepalFlag.txt
Displaying NepalFlag.txt.