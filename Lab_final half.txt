#include<iostream>
#include<windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include<math.h>

# define PI           3.14159265358979323846

GLfloat x=0;
GLfloat y=0;
GLfloat radius =1;
int i;
int triangleAmount = 16;
GLfloat twicePi = 2.0f * PI;

GLfloat t=0;
GLfloat pan=-1;
GLfloat dd=1;
GLfloat car=0;
GLfloat wind=1;
GLfloat tree=0;
GLfloat tf=0.05;

GLfloat pl=-1.5;
GLfloat flag=-1;

GLfloat spd=0.001;
GLfloat cl1=0;
GLfloat cl2=0.5;
GLfloat cl3=-0.7;
GLfloat cl4=0.9;
GLfloat cl5=-0.2;



void day();

void dayswitch(int dd)
{
    if (dd==0)
    {
        wind=1;
        tf=0.05;
        glutDisplayFunc(day);
        PlaySound(NULL, NULL, 0);
    }


}

void day(void)
{
    glClearColor(0.7,0.9,0.95,1);
    glClear(GL_COLOR_BUFFER_BIT);




    glLoadIdentity();
    gluOrtho2D(pan,pan+1,-0.5,0.5);

    //BG
    {
        glColor3f(0.3,0.5,0.2);

        glBegin(GL_POLYGON);
        glVertex2f(-1,-1);
        glVertex2f(-1,-0.1);
        glVertex2f(1,-0.1);
        glVertex2f(1,-1);
        glEnd();
    }
    gluOrtho2D(-1000,1000,-1000,1000);


    glLoadIdentity();

    gluOrtho2D(pan,pan+1,-0.5,0.5);
    glScalef(0.5,0.5,1);
    glTranslatef(car,-0.85,0);
    gluOrtho2D(-1000,1000,-1000,1000);
    //CAR
    {
        glColor3f(0.8,0.2,0.2);
        glBegin(GL_POLYGON);
        glVertex2f(0,0);
        glVertex2f(-648.109,0);
        glVertex2f(-793.535,14.366);
        glVertex2f(-787.832,60.703);
        glVertex2f(-791.04,129.139);
        glVertex2f(-763.594,195.436);
        glVertex2f(-717.97,234.644);
        glVertex2f(-635.99,266.723);
        glVertex2f(-346.564,295.238);
        glVertex2f(-95.634,417.139);
        glVertex2f(22.703,446.366);
        glVertex2f(240.129,449.574);
        glVertex2f(374.149,432.109);
        glVertex2f(491.772,398.96);
        glVertex2f(598.703,356.188);
        glVertex2f(743.059,332.663);
        glVertex2f(770.861,288.822);
        glVertex2f(770.861,203.277);
        glVertex2f(791.178,179.752);
        glVertex2f(784.762,92.069);
        glVertex2f(769.792,46.089);
        glVertex2f(608.683,0);
        glEnd();


        glColor3f(0.4,0.75,0.9);
        glBegin(GL_POLYGON);
        glVertex2f(-92.307,280.98);
        glVertex2f(-262.446,280.98);
        glVertex2f(-210.168,327.079);
        glVertex2f(-116.767,381.14);
        glVertex2f(-29.155,416.109);
        glVertex2f(63.337,430.683);
        glVertex2f(144.248,430.683);
        glVertex2f(107.891,289.891);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(381.11,307.179);
        glVertex2f(144.248,292.386);
        glVertex2f(168.604,430.683);
        glVertex2f(238.941,427.832);
        glVertex2f(321.634,415.475);
        glVertex2f(382.465,398.366);
        glVertex2f(453.752,369.376);
        glVertex2f(477.99,346.089);
        glVertex2f(473.713,315.198);
        glEnd();

        glColor3f(0.9,0.9,0.9);
        glBegin(GL_POLYGON);
        glVertex2f(-698.901,159.436);
        glVertex2f(-764.663,159.436);
        glVertex2f(-747.554,193.653);
        glVertex2f(-718.683,220.386);
        glVertex2f(-679.119,234.287);
        glVertex2f(-633.139,238.564);
        glVertex2f(-641.693,199);
        glEnd();

        glColor3f(0.7,0.0,0.0);
        glBegin(GL_POLYGON);
        glVertex2f(770.861,213.495);
        glVertex2f(694.228,213.495);
        glVertex2f(682.371,227.943);
        glVertex2f(689,253.891);
        glVertex2f(717.515,272.901);
        glVertex2f(770.861,288.822);
        glEnd();


        x=-490; y=37.891; radius =120;
            i;
            triangleAmount = 16;
            twicePi = 2.0f * PI;

        glColor3f(0.1,0.1,0.1);
      	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
        glEnd();

        glTranslatef(-490,37.991,0);
        glRotatef(-23.873*(car*1000/120),0,0,1);
        {
            glColor3f(0.7,0.7,0.7);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
        }
        glRotatef(23.873*(car*1000/120),0,0,1);
        glTranslatef(+490,-37.991,0);

        x=-490; y=37.891; radius =25;
            i;
            triangleAmount = 16;
            twicePi = 2.0f * PI;

        glColor3f(0.7,0.7,0.7);
      	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
        glEnd();

        x=469; y=37.891; radius =120;
            i;
            triangleAmount = 16;
            twicePi = 2.0f * PI;

        glColor3f(0.1,0.1,0.1);
      	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
                x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
            );
		}
        glEnd();

        glTranslatef(469,37.991,0);
        glRotatef(-23.873*(car*1000/120),0,0,1);
        {

            glColor3f(0.7,0.7,0.7);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
            glRotatef(60,0,0,1);
            glBegin(GL_TRIANGLES);
            glVertex2f(0,0);
            glVertex2f(-10,80);
            glVertex2f(10,80);
            glEnd();
        }
        glRotatef(+23.873*(car*1000/120),0,0,1);
        glTranslatef(-469,-37.991,0);

        x=469; y=37.891; radius =25;
            i;
            triangleAmount = 16;
            twicePi = 2.0f * PI;

        glColor3f(0.7,0.7,0.7);
      	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
        glEnd();





        }

    glLoadIdentity();



    glLoadIdentity();

    glFlush();
}

void SpecialInput(int key, int x, int y)
{
switch(key)
{
case GLUT_KEY_UP:
break;
case GLUT_KEY_DOWN:
break;
case GLUT_KEY_LEFT:
    {
    pan-=0.1;
    if (pan<-1)
    {
        pan=0;
    }
        break;
    }
case GLUT_KEY_RIGHT:
    {
    pan+=0.1;
    if (pan>0)
    {
        pan=-1;
    }
        break;
    }
break;
}
glutPostRedisplay();
}
void handleKeypress(unsigned char key, int x, int y){
	switch (key) {


case 'd':
    {
    dayswitch(0);
    break;
	}
	}
    glutPostRedisplay();
}

void handleMouse(int button, int state, int x, int y) {
	if(button==GLUT_LEFT_BUTTON)
	if(button==GLUT_LEFT_BUTTON)
    {
        {
            flag=1;
        }
    }

	if(button==GLUT_RIGHT_BUTTON)
    {
        {
            flag=-1;
        }
    }

}

void update(int value)
{
    t++;
    car-=0.05;
    if (car<=-5)
        car=5;
    else if (car>=5)
        car=-5;

    if(flag==1&&pl<1.5)
        {
            pl += 0.025;
        }
    if(flag==-1&&pl>-1.5)
        {
            pl -= 0.025;
        }

    cl1+=(spd*2);
    if (cl1>=1.25)
        cl1=-1.25;

    else if (cl1<=-1.25)
        cl1=1.25;

	cl2+=(spd*3);
    if (cl2>=1.25)
        cl2=-1.25;

    else if (cl2<=-1.25)
        cl2=1.25;

	cl3+=(spd*2.25);
    if (cl3>=1.25)
        cl3=-1.25;

    else if (cl3<=-1.25)
        cl3=1.25;

	cl4+=(spd*1.5);
    if (cl4>=1.25)
        cl4=-1.25;

    else if (cl4<=-1.25)
        cl4=1.25;

	cl5+=(spd*2);
    if (cl5>=1.25)
        cl5=-1.25;

    else if (cl5<=-1.25)
        cl5=1.25;


    tree=wind*1*sin(t*wind*tf);



glutPostRedisplay();

glutTimerFunc(25, update, 0);

}

void Idle()
{
    glutPostRedisplay();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);                 // Initialize GLUT
    glutInitWindowSize(800,800);
    glutInitWindowPosition(50,50);
    glutCreateWindow("Scene");
    //glutIdleFunc(Idle);
    glutDisplayFunc(day);

    glutTimerFunc(100, update, 0);
    glutSpecialFunc(SpecialInput);
    glutKeyboardFunc(handleKeypress);
    glutMouseFunc(handleMouse);
//    initGL();

    glutMainLoop();
    return 0;

}
